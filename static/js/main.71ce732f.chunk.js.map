{"version":3,"sources":["components/Results.js","App.js","serviceWorker.js","index.js"],"names":["Results","props","react_default","a","createElement","className","data","cod","Fragment","sys","country","src","concat","alt","Math","round","main","temp","wind","speed","weather","description","toLowerCase","charAt","toUpperCase","slice","message","App","state","value","getData","fetch","_this","then","res","json","setState","code","_this2","this","id","console","log","onSubmit","e","preventDefault","stopPropagation","placeholder","onChange","target","type","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAEe,SAASA,EAAQC,GAC9B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACS,MAAnBJ,EAAMK,KAAKC,IACVL,EAAAC,EAAAC,cAACF,EAAAC,EAAMK,SAAP,KACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACVJ,EAAMK,KAAKG,IAAIC,QAAQR,EAAAC,EAAAC,cAAA,OAAKO,IAAG,+BAAAC,OAAiCX,EAAMK,KAAKG,IAAIC,QAAhD,gBAAuEG,IAAI,MAE/GX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQS,KAAKC,MAAMd,EAAMK,KAAKU,KAAKC,KAAK,KAAvD,SACAf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,WAAiCJ,EAAMK,KAAKY,KAAKC,MAAjD,WACAjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQJ,EAAMK,KAAKc,QAAQ,GAAGC,YAAYC,cAAcC,OAAO,GAAGC,cAAgBvB,EAAMK,KAAKc,QAAQ,GAAGC,YAAYI,MAAM,KAEzIxB,EAAMK,KAAKoB,QAAUxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQJ,EAAMK,KAAKoB,SAAiB,gBCgDrEC,6MAzDbC,MAAQ,CACNtB,KAAM,GACNuB,MAAO,MAGTC,QAAU,WACRC,MAAK,qDAAAnB,OAAsDoB,EAAKJ,MAAMC,MAAjE,4CACFI,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAA3B,GACJ0B,EAAKI,SAAS,CAAC9B,KAAMA,+EAIlB,IACH+B,EADGC,EAAAC,KAUP,OARGA,KAAKX,MAAMtB,KAAKc,UAEjBiB,EAAQE,KAAKX,MAAMtB,KAAKc,QAAQ,GAAGoB,IAIrCC,QAAQC,IAAIL,GAGVnC,EAAAC,EAAAC,cAAA,OACEC,UACEgC,EAAO,IAAM,cACZA,GAAQ,KAAOA,GAAO,IAAM,MAC5BA,GAAQ,KAAOA,GAAQ,IAAM,aAAe,OAG/CnC,EAAAC,EAAAC,cAAA,QACEuC,SAAU,SAAAC,GACRA,EAAEC,iBACFD,EAAEE,kBACFR,EAAKR,YAGP5B,EAAAC,EAAAC,cAAA,SACE2C,YAAY,aACZ1C,UAAU,QACVwB,MAAOU,KAAKX,MAAMC,MAClBmB,SAAU,SAAAJ,GACRN,EAAKF,SAAS,CAACP,MAAOe,EAAEK,OAAOpB,WAGnC3B,EAAAC,EAAAC,cAAA,UAAQ8C,KAAK,UAAb,SAGFhD,EAAAC,EAAAC,cAACJ,EAAD,CACEM,KAAMiC,KAAKX,MAAMtB,eAnDT6C,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.71ce732f.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Results(props) {\n  return (\n    <div className=\"result\">\n        {props.data.cod === 200 ?\n          <React.Fragment>\n            <div className=\"data\">\n                {props.data.sys.country}<img src={`https://www.countryflags.io/${props.data.sys.country}/flat/64.png`} alt=\"\"/>\n            </div>\n            <div className=\"data\">{Math.round(props.data.main.temp-273)}&#x00B0;C</div>\n            <div className=\"data\">Wind&nbsp;{props.data.wind.speed}&nbsp;m/s</div>\n            <div className=\"data\">{props.data.weather[0].description.toLowerCase().charAt(0).toUpperCase() + props.data.weather[0].description.slice(1)}</div>\n          </React.Fragment>\n          : props.data.message ? <div className=\"data\">{props.data.message}</div> : null\n\n        }\n    \n    </div>\n  )\n}\n","import React, { Component } from 'react';\nimport Results from './components/Results'\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    data: {},\n    value: \"\",\n  }\n\n  getData = () =>{\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=72d88e9141ea810430c69758d28e1351`)\n      .then(res => res.json())\n      .then(data => {\n        this.setState({data: data})\n      })\n  }\n\n  render() {\n    let code;\n    if(this.state.data.weather){\n\n      code  = this.state.data.weather[0].id\n    }\n\n\n    console.log(code)\n\n    return (\n      <div \n        className={\n          code < 600 ? \"App bg-rain\": \n          (code >= 600 && code <=622 ? \"App\":\n          (code >= 800 && code <= 802 ? \"App bg-sun\" : \"App\"))\n        }\n      >\n        <form \n          onSubmit={e=>{\n            e.preventDefault();\n            e.stopPropagation();\n            this.getData();\n          }}\n        >\n          <input\n            placeholder=\"Enter city\"\n            className=\"input\"\n            value={this.state.value}\n            onChange={e=>{\n              this.setState({value: e.target.value});\n            }}\n          />\n          <button type=\"submit\">find</button>\n        </form>\n\n        <Results \n          data={this.state.data} \n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}